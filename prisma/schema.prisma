generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  name         String
  username     String   @unique
  email        String   @unique
  passwordHash String   @map("password_hash")
  about        String?
  semester     Int
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  profileUrl   String?       @unique @map("profile_url")
  profileImage ProfileImage? @relation(fields: [profileUrl], references: [url])

  trails   Trail[]
  projects Project[]
  comments Comment[]

  @@map("users")
}

model Subject {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  projects Project[]

  @@map("subjects")
}

model Professor {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  projects Project[]

  @@map("professors")
}

model Trail {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  users    User[]
  projects Project[]

  @@map("trails")
}

enum ProjectStatus {
  DRAFT
  PUBLISHED
}

model Project {
  id            String        @id @default(uuid())
  title         String
  description   String
  content       String?
  publishedYear Int           @map("published_year")
  status        ProjectStatus @default(DRAFT)
  semester      Int
  allowComments Boolean       @map("allow_comments")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  authorId  String  @map("author_id")
  author    User    @relation(fields: [authorId], references: [id])
  subjectId String  @map("subject_id")
  subject   Subject @relation(fields: [subjectId], references: [id])
  bannerUrl String  @unique @map("banner_url")
  banner    Banner  @relation(fields: [bannerUrl], references: [url])

  trails     Trail[]
  professors Professor[]
  comments   Comment[]

  @@map("projects")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  authorId  String  @map("author_id")
  author    User    @relation(fields: [authorId], references: [id])
  projectId String  @map("project_id")
  project   Project @relation(fields: [projectId], references: [id])

  @@map("comments")
}

model ProfileImage {
  id        String   @id @default(uuid())
  url       String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User?

  @@map("profile_images")
}

model Banner {
  id        String   @id @default(uuid())
  url       String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  project Project?

  @@map("banners")
}
