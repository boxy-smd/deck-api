generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  name         String
  username     String   @unique
  email        String   @unique
  passwordHash String   @map("password_hash")
  about        String?
  semester     Int
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  profileUrl   String?  @map("profile_url")

  trails   Trail[]
  drafts   Draft[]
  projects Project[]
  comments Comment[]
  reports  Report[]

  @@map("users")
}

model Subject {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  projects Project[]
  drafts   Draft[]

  @@map("subjects")
}

model Professor {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  projects Project[]
  drafts   Draft[]

  @@map("professors")
}

model Trail {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  users    User[]
  projects Project[]
  drafts   Draft[]

  @@map("trails")
}

model Draft {
  id            String    @id @default(uuid())
  title         String
  description   String?
  content       String?
  publishedYear Int?      @map("published_year")
  semester      Int?
  allowComments Boolean?  @map("allow_comments")
  bannerUrl     String?   @map("banner_url")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime? @updatedAt @map("updated_at")

  authorId  String   @map("author_id")
  author    User     @relation(fields: [authorId], references: [id])
  subjectId String?  @map("subject_id")
  subject   Subject? @relation(fields: [subjectId], references: [id])

  trails     Trail[]
  professors Professor[]

  @@map("drafts")
}

enum ProjectStatus {
  DRAFT
  PUBLISHED
}

model Project {
  id            String        @id @default(uuid())
  title         String
  description   String
  content       String?
  publishedYear Int           @map("published_year")
  status        ProjectStatus @default(DRAFT)
  semester      Int
  allowComments Boolean       @map("allow_comments")
  bannerUrl     String        @map("banner_url")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  authorId  String   @map("author_id")
  author    User     @relation(fields: [authorId], references: [id])
  subjectId String?  @map("subject_id")
  subject   Subject? @relation(fields: [subjectId], references: [id])

  trails     Trail[]
  professors Professor[]
  comments   Comment[]

  @@map("projects")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  authorId  String  @map("author_id")
  author    User    @relation(fields: [authorId], references: [id])
  projectId String  @map("project_id")
  project   Project @relation(fields: [projectId], references: [id])

  reports Report[]

  @@map("comments")
}

model Report {
  id         String   @id @default(uuid())
  content    String
  isResolved Boolean  @map("is_resolved")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  authorId  String  @map("author_id")
  author    User    @relation(fields: [authorId], references: [id])
  commentId String  @map("comment_id")
  comment   Comment @relation(fields: [commentId], references: [id])

  @@map("reports")
}
